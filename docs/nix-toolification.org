* Nix-toolifying iohk projects

We have [[https://github.com/angerman/nix-tools][nix-tools]] to generate structure preserving nix expressions
from cabal files. nix-tools also includes ~stack-to-nix~ to generate
expressions for stack files.

The nix-tools approach is different from the stock haskell
infrastructure in nixpkgs. It provides component level expressions and
an option system to modify packages.

** nix-tools overview

Usually when talking about ~nix-tools~, we usually mean not only the
nix-tools tool set found in [[https://github.com/angerman/nix-tools][nix-tools]] that contains

- stack-to-nix
- plan-to-nix
- cabal-to-nix

as well as a few other support tools, but also the ~nix-tools~ haskell
runtime system [[https://github.com/angerman/haskell.nix][haskell.nix]] that is written in nix. For anything useful
we will rely on [[https://github.com/angerman/hackage.nix][hackage.nix]] to provide us with all cabal expressions
from hackage.  When using stackage, we will also need [[https://github.com/angerman/stackage.nix][stackage.nix]] to
provide the lts and nightly stackage snapshots as nix expressions.

~haskell.nix~ provides the central ~mkNewPkgSet~ function which will
construct a set of derivation for use in nix.

To construct a new package set, we will need a copy of [[https://github.com/nixos/nixpkgs][nixpkgs]] to
resolve system packages and use nixpkgs builders.

** iohk nix expressions

We also have a set of iohk nix expressions that are intended to be
used as a library across multiple iohk projects so we do not end up
with lots of repetitive duplication in each project that over time
diverges. These can be found in the [[https://github.com/input-output-hk/iohk-nix][iohk-nix]] repository.

** How to nix-toolify a project

*** Objectives

These rare notes, I (@angerman) took while nix-toolifying
[[https://github.com/input-output-hk/cardano-chain][cardano-chain]].

Our end goal is to provide a ~default.nix~ and a ~release.nix~. Where
the ~default.nix~ exports enough information that the end user can

#+BEGIN_SRC bash
nix build
#+END_SRC

And obtain the relevant artifacts for the current system.

The ~release.nix~ is supposed to produce a set of hydra job to be
consumed by the hydra continuous integration system.

*** Pinning nixpkgs

We want to ensure that the ~nixpkgs~ we work with are pinned, as such
we'll use the following bootstrap ~lib.nix~ to get ~iohk-nix~ and
subsequently obtain the pinned ~nixpkgs~ from it.

#+BEGIN_EXAMPLE
let
  # iohk-nix can be overridden for debugging purposes by setting
  # NIX_PATH=iohk_nix=/path/to/iohk-nix
  iohkNix = import (
    let try = builtins.tryEval <iohk_nix>;
    in if try.success
    then builtins.trace "using host <iohk_nix>" try.value
    else
      let
        spec = builtins.fromJSON (builtins.readFile ./iohk-nix.json);
      in builtins.fetchTarball {
        url = "${spec.url}/archive/${spec.rev}.tar.gz";
        inherit (spec) sha256;
      }) {};

  pkgs = iohkNix.pkgs;
  lib = pkgs.lib;
in lib // { inherit iohkNix pkgs; }
#+END_EXAMPLE

and an ~iohk-nix.json~ file
#+BEGIN_EXAMPLE
{
  "url": "https://github.com/input-output-hk/iohk-nix",
  "rev": "38ce381b7009a3c1950347323376a16742dd8418",
  "sha256": "0jzy9mdakysi2g8kjmvnp5zy291d1j193rzl8zyi20j3af8vmhnx",
  "fetchSubmodules": false
}
#+END_EXAMPLE
NOTE: the ~sha256~ can be obtained via
#+BEGIN_SRC bash
nix-prefetch --unpack https://github.com/input-output-hk/iohk-nix/archive/$REV.tar.gz
#+END_SRC

*** Scaffolding ~nix-tools~

As we will need access to the nix-tools runtime, we will pull pinned
version of ~haskell.nix~, ~hackage.nix~ and ~stackage.nix~. To do this
we will us the ~nix/haskell-hackage-stackage.nix~ file:

#+BEGIN_EXAMPLE
{ pkgs }:
let
  # overriding logic so we can pass -I to nix, and overide the
  # relevant import.
  overrideWith = override: default:
   let
     try = builtins.tryEval (builtins.findFile builtins.nixPath override);
   in if try.success then
     builtins.trace "using search host <${override}>" try.value
   else
     default;
in rec {
  hackage = import (overrideWith "hackage"
                    (pkgs.fetchFromGitHub { owner  = "angerman";
                                            repo   = "hackage.nix";
                                            rev    = "d4ef2536554d78c6adf368816a4476bc909fcd96";
                                            sha256 = "15siby9iwgi8bhkj83q1djvg6b6n4gj08n7yy66ccjck7fw4hbr8";
                                            name   = "hackage-exprs-source"; }))
                   ;
  # a different haskell infrastructure
  haskell = import (overrideWith "haskell"
                    (pkgs.fetchFromGitHub { owner  = "angerman";
                                            repo   = "haskell.nix";
                                            rev    = "3a6c2f823d0db6ac6730dcf78076fd5d904fba85";
                                            sha256 = "1cv4kw2mfk8d3ck7z5vf8380489z5128638jk919am4iqq5g8k5w";
                                            name   = "haskell-lib-source"; }))
                   hackage;

  # the set of all stackage snapshots
  stackage = import (overrideWith "stackage"
                     (pkgs.fetchFromGitHub { owner  = "angerman";
                                             repo   = "stackage.nix";
                                             rev    = "f58d5b78e7a40260c6142c79e52c2bf3ae9876b9";
                                             sha256 = "1nd9lfm016rlhw3133488f8v8x3lbxrld422gw8gcjhhfls3civn";
                                             name   = "stackage-snapshot-source"; }))
                   ;
}
#+END_EXAMPLE

With this in place we can build our package set in ~nix/pkgs.nix~

**** For a *stackage* project

#+BEGIN_EXAMPLE
{ args ? { config = import ./config.nix; }
, nixpkgs ? import <nixpkgs>
}:
let
  pkgs = nixpkgs args;
in
let

  inherit (import ./haskell-hackage-stackage.nix { inherit pkgs; }) haskell hackage stackage;

  # our packages
  stack-pkgs = import ./.stack-pkgs.nix;

  # Build the packageset with module support.
  # We can essentially override anything in the modules
  # section.
  #
  #  packages.cbors.patches = [ ./one.patch ];
  #  packages.cbors.flags.optimize-gmp = false;
  #
  pkgSet = haskell.mkNewPkgSet {
    inherit pkgs;
    pkg-def = stackage.${stack-pkgs.resolver};
    # The overlay allows extension or restriction of the set of
    # packages we are interested in. By using the stack-pkgs.overlay
    # we restrict our package set to the ones provided in stack.yaml.
    pkg-def-overlays = [
      stack-pkgs.overlay
    ];
    # package customizations
    modules = [ ];
  };
in
  pkgSet.config.hsPkgs // { _config = pkgSet.config; }
#+END_EXAMPLE

**** For a *cabal* project.

#+BEGIN_EXAMPLE
{ args ? { config = import ./config.nix; }
, nixpkgs ? import <nixpkgs>
}:
let
  pkgs = nixpkgs args;
in
let

  inherit (import ./haskell-hackage-stackage.nix { inherit pkgs; }) haskell hackage stackage;

  # Build the packageset with module support.
  # We can essentially override anything in the modules
  # section.
  #
  #  packages.cbors.patches = [ ./one.patch ];
  #  packages.cbors.flags.optimize-gmp = false;
  #
  pkgSet = haskell.mkNewPkgSet {
    inherit pkgs;
    pkg-def = ./plan.nix;
    # The overlay allows extension or restriction of the set of
    # packages we are interested in. By using the stack-pkgs.overlay
    # we restrict our package set to the ones provided in stack.yaml.
    pkg-def-overlays = [ ];
    # package customizations
    modules = [ ];
  };
in
  pkgSet.config.hsPkgs // { _config = pkgSet.config; }
#+END_EXAMPLE

*** Building the ~default.nix~

#+BEGIN_EXAMPLE default.nix
let
  localLib = import ./lib.nix;
in
{ system ? builtins.currentSystem
, config ? {}
, pkgs ? localLib.iohkNix.getPkgs { inherit system config; }
}:
with builtins; with pkgs.lib;
let  nix-tools = import ./nix/pkgs.nix { nixpkgs = _: pkgs; };
in {
    # keep a handle on iohkNix to call nix-tools.regeneratePackages
    _iohk = localLib.iohkNix;

    # the actual derivations.
    nix-tools = { _raw = nix-tools; }
      # some shorthands
      // { libs = mapAttrs (k: v: if   v.components ? "library"
                                  then v.components.library
                                  else null) nix-tools; }
      // { exes = mapAttrs (k: v: if   length (attrValues v.components.exes) > 0
                                  then (if pkgs.stdenv.targetPlatform.isWindows then pkgs.copyJoin else pkgs.symlinkJoin)
                                       { name = "${k}-exes"; paths = attrValues v.components.exes; }
                                  else null) nix-tools; }
      // { tests = mapAttrs (k: v: if length (attrValues v.components.tests) > 0
                                   then v.components.tests
                                   else null) nix-tools; }
      // { benchmarks = mapAttrs (k: v: if length (attrValues v.components.benchmarks) > 0
                                   then v.components.benchmarks
                                   else null) nix-tools; }
      ;
  }
#+END_EXAMPLE

*** Generating the ~nix/.stack-pkgs.nix~ for a ~stack.yaml~ project

This can be done quite easily as ~iohkNix~ provides the relevant
regeneration script:

#+BEGIN_SRC
nix build -f default.nix _iohk.nix-tools.regeneratePackages --out-link regen-pkgs
./regen-pkgs
#+END_SRC

This will install ~nix-tools~ and call

#+BEGIN_SRC
stack-to-nix -o nix stack.yaml > nix/.stack-pkgs.nix~.
#+END_SRC

If you run into some hackage packages missing that stackage
referneces, these are usually packages shipped with ghc and are safe
to ignore. Overriding the ~pkg-def~ with the following hack will work
to stub out ~ghc-heap~ for 8.6.1 and 8.6.2. Ideally those packages
would be on hackage.

#+BEGIN_EXAMPLE
    pkg-def = hackage: stackage.${stack-pkgs.resolver} (hackage // { ghc-heap = { "8.6.1".revisions.default = null; "8.6.2".revisions.default = null; };});
#+END_EXAMPLE

*** Generating the ~nix/plan.nix~ for a ~cabal.project~ project.

We don't have a regeneration script yet, so we'll need to do this by
hand

#+BEGIN_SRC
cabal new-update    # to update the package index in case it is stale
cabal new-configure # to generate the relevant information for plan-to-nix
plan-to-nix ./dist-newstyle/cache/plan.json > nix/plan.nix
#+END_SRC

If there are additional source package specified in the
~cabal.project~ file: these can be handled as follows:

#+BEGIN_SRC
cabal-to-nix https://github.com/$owner/$repo.git $revision > nix/$repo.nix
#+END_SRC

and then added to the ~nix/pkgs.nix~ file in the ~pkg-def-overlays~
section:
#+BEGIN_EXAMPLE
  pkgSet = haskell.mkNewPkgSet {
    inherit pkgs;
    pkg-def = ./plan.nix;
    pkg-def-ovrlays = [
     { pkg-a = ./pkg-a.nix;
       pkg-b = ./pkg-b.nix;
       pkg-c = ./pkg-c.nix; }
    ];
    modules = [ ];
  };
#+END_EXAMPLE

NOTE: due to some issues with [[https://mail.haskell.org/pipermail/ghc-devs/2019-January/016914.html][ghc shipping with libraries that do not match their respective versions on hackage]], you will need the
following lines in the ~pkgSet~ as well:
#+BEGIN_EXAMPLE
    # package customizations
    modules = [ haskell.ghcHackagePatches.${(stack-pkgs.overlay hackage).compiler.nix-name} ];
#+END_EXAMPLE

*** Building the ~release.nix~

#+BEGIN_EXAMPLE
let
  localLib = import ./lib.nix;
in
{ system ? builtins.currentSystem
, config ? {}
, pkgs ? localLib.iohkNix.getPkgs { inherit system config; }

, chain ? { outPath = ./.; rev = "abcdef"; }

, scrubJobs ? true
, supportedSystems ? [ "x86_64-linux" "x86_64-darwin" ]
, nixpkgsArgs ? {
    config = { allowUnfree = false; inHydra = true; };
  }
}:
with (import (localLib.iohkNix.nixpkgs + "/pkgs/top-level/release-lib.nix") {
  inherit supportedSystems scrubJobs nixpkgsArgs;
  packageSet = import ./.;
});
with pkgs.lib;
let

  # packages we are actually interested in built in CI.
  packages = [ "cardano-chain" ];

  # bulding the expressions for all supportedSystems
  packageSet = import ./. {};
  nix-tools-pkgs = supportedSystems: {
    nix-tools.libs =
      mapAttrs (_: _: supportedSystems)
        (filterAttrs (n: v: builtins.elem n packages && v != null) packageSet.nix-tools.libs);
    nix-tools.exes =
      mapAttrs (_: mapAttrs (_: _: supportedSystems))
        (filterAttrs (n: v: builtins.elem n packages && v != null) packageSet.nix-tools.exes);
    nix-tools.tests =
      mapAttrs (_: mapAttrs (_: _: supportedSystems))
        (filterAttrs (n: v: builtins.elem n packages && v != null) packageSet.nix-tools.tests);
    nix-tools.benchmarks =
      mapAttrs (_: mapAttrs (_: _: supportedSystems))
        (filterAttrs (n: v: builtins.elem n packages && v != null) packageSet.nix-tools.benchmarks);
  };

  # make hydra expressions for building those expressoins on each system.
  mapped-pkgs = mapTestOn (nix-tools-pkgs supportedSystems);

  # same for windows cross compilation. But only build those on linux.
  # if you want to test on macOS, add "x86_64-darwin" to the list.
  mapped-pkgs-mingw32 = mapTestOnCross lib.systems.examples.mingwW64 (nix-tools-pkgs [ "x86_64-linux" ]);

  # merge both non, and the cross compiled targets together
  # renmae the cross compiled targets such that they carry their system prefix.

  # nix-tools.libs.cardano-chain.x86_64-linux
  # for the cardano-chain built on linux

  # nix-tools.libs.x86_64-pc-mingw32-cardano-chain.x86_64-linux
  # for the one for windows but built (cross compiled on linux)

  mapped-pkgs-all
    = lib.recursiveUpdate
        (mapped-pkgs)
        (lib.mapAttrs (_: (lib.mapAttrs (_: (lib.mapAttrs' (n: v: lib.nameValuePair (lib.systems.examples.mingwW64.config + "-" + n) v)))))
          mapped-pkgs-mingw32);

# finally define the set of jobs.
in fix (self: mapped-pkgs-all // {

  # the required job will fail if any of its constituents fails.
  required = pkgs.lib.hydraJob (pkgs.releaseTools.aggregate {
    name = "required-checks";
    constituents = with self;
      [ nix-tools.libs.cardano-chain.x86_64-linux
        nix-tools.libs.cardano-chain.x86_64-darwin
        nix-tools.tests.cardano-chain.cardano-chain-test.x86_64-linux
        nix-tools.tests.cardano-chain.cardano-chain-test.x86_64-darwin
      ];
  });

})

#+END_EXAMPLE
